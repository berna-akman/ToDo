// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// BoardController is an autogenerated mock type for the BoardController type
type BoardController struct {
	mock.Mock
}

// Create provides a mock function with given fields: w, r
func (_m *BoardController) Create(w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(w, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: w, r
func (_m *BoardController) Delete(w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(w, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: w, r
func (_m *BoardController) GetAll(w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(w, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: w, r
func (_m *BoardController) GetByID(w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(w, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: w, r
func (_m *BoardController) Update(w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(w, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBoardController interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoardController creates a new instance of BoardController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBoardController(t mockConstructorTestingTNewBoardController) *BoardController {
	mock := &BoardController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
