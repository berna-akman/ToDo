// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	board "to-do-api/pg/domain/board"

	mock "github.com/stretchr/testify/mock"
)

// BoardService is an autogenerated mock type for the BoardService type
type BoardService struct {
	mock.Mock
}

// CreateBoard provides a mock function with given fields: _a0
func (_m *BoardService) CreateBoard(_a0 board.Board) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(board.Board) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBoard provides a mock function with given fields: _a0
func (_m *BoardService) DeleteBoard(_a0 uint) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBoards provides a mock function with given fields:
func (_m *BoardService) GetAllBoards() (*board.DTO, error) {
	ret := _m.Called()

	var r0 *board.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func() (*board.DTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *board.DTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*board.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBoardByID provides a mock function with given fields: _a0
func (_m *BoardService) GetBoardByID(_a0 uint) (*board.Board, error) {
	ret := _m.Called(_a0)

	var r0 *board.Board
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*board.Board, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) *board.Board); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*board.Board)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBoard provides a mock function with given fields: _a0
func (_m *BoardService) UpdateBoard(_a0 board.Board) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(board.Board) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBoardService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoardService creates a new instance of BoardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBoardService(t mockConstructorTestingTNewBoardService) *BoardService {
	mock := &BoardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
